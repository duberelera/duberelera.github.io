{
  "hash": "969813c629f906d0a8b6a4308271fa4d",
  "result": {
    "markdown": "---\ntitle: 'R aplicado a Medición Forestal'\nsubtitle: 'Tutoriales para estudiantes de Ciencias Forestales'\ndate: \"2023-09-04\"\nformat: html\n---\n\n\n\n# **R Básico: Primeros Pasos**\n*Autor: MSc. Duberlí G. Elera Gonzales*\n\n# ¿Qué es y por qué usar `R`?\n\n`R` es un lenguaje de programación con enfoque estadístico. Tiene una amplia gama de aplicaciones, principalmente en el campo científico. Por ese motivo utilizaremos `R` en la parte práctica del curso Mediciones Forestales.\n\nEn esta primera etapa, se conocerá la funcionalidad del software, la sintaxis del mismo, el tipo de operaciones básicas que pueden ser ejecutadas, así como la creación y manipulación de objetos.\n\n## R como una calculadora\n\n### Operaciones matemáticas\n\n\n::: {.cell}\n\n```{.r .cell-code}\n2 + 2 #Suma\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 4\n```\n:::\n\n```{.r .cell-code}\n6 - 2 #resta\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 4\n```\n:::\n\n```{.r .cell-code}\n3 * 2 #Multiplicación\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 6\n```\n:::\n\n```{.r .cell-code}\n12/5 #División\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 2.4\n```\n:::\n\n```{.r .cell-code}\n2^3 #Potencia\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 8\n```\n:::\n\n```{.r .cell-code}\n2**3 \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 8\n```\n:::\n\n```{.r .cell-code}\n10%%3 #Módulo\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1\n```\n:::\n\n```{.r .cell-code}\n12%%4\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0\n```\n:::\n\n```{.r .cell-code}\nsqrt(36) #Raíz cuadrada\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 6\n```\n:::\n\n```{.r .cell-code}\nlog(25) #Logaritmo Natural\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 3.218876\n```\n:::\n\n```{.r .cell-code}\nlog10(25) #Logaritmo base 10\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1.39794\n```\n:::\n\n```{.r .cell-code}\nexp(1) #Antilogaritmo o número e\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 2.718282\n```\n:::\n:::\n\n\n## Asignación de variables\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#asignación de un valor a \"x\"\nx <- 12 - 4\nx\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 8\n```\n:::\n\n```{.r .cell-code}\n#asignación de un valor a \"y\"\ny <- sqrt(x)\ny\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 2.828427\n```\n:::\n\n```{.r .cell-code}\n#asignación de un valor a \"z\"\nz <- log(y*sqrt(x))\nz\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 2.079442\n```\n:::\n:::\n\n\n## Creación y manipulación de objetos en R\n\n### Vector\n\nUn vector puede estar conformado por valores únicos o múltiples y pueden ser de tipo numérico, caracter o lógico.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#Vector de un elemento numérico\nv1 <- 2\nv1\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 2\n```\n:::\n\n```{.r .cell-code}\nis.vector(v1) #Consulta para verificar si es un vector\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n\n```{.r .cell-code}\n#Vector de un elemento tipo caracter\nv2 <- 'juan'\nv2\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"juan\"\n```\n:::\n\n```{.r .cell-code}\nis.vector(v2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n\n```{.r .cell-code}\n#Vector de un elemento lógico\nv3 <- FALSE\nv3\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE\n```\n:::\n\n```{.r .cell-code}\nis.vector(v3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n:::\n\n\nLa función más utilizada para la formación o construcción de vectores en `R` es la función `c()`, tal como se muestra a continuación.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#Vector de números enteros\nv4 <- c(4, 8, 12, 15)\nv4\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]  4  8 12 15\n```\n:::\n\n```{.r .cell-code}\n#Vector de números decimales\nv5 <- c(4, 8, 12, 15, sqrt(35), log(15))\nv5\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]  4.00000  8.00000 12.00000 15.00000  5.91608  2.70805\n```\n:::\n\n```{.r .cell-code}\n#Vector de números decimales\nv6 <- c(4, 8, 10.7, 12, 15)\nv6\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]  4.0  8.0 10.7 12.0 15.0\n```\n:::\n\n```{.r .cell-code}\n#Vector de caracteres\nv7 <- c(5, 8, 'juan', 'tereza')\nv7\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"5\"      \"8\"      \"juan\"   \"tereza\"\n```\n:::\n\n```{.r .cell-code}\nis.vector(v7)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n\n```{.r .cell-code}\n#Vector de números caracteres\nv8 <- c(\"nilser\", 'kely', 'ronal', 'jorge')\nv8\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"nilser\" \"kely\"   \"ronal\"  \"jorge\" \n```\n:::\n\n```{.r .cell-code}\n#Vector de valores lógicos\nv9 <- c(TRUE, TRUE, FALSE, TRUE)\nv9\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]  TRUE  TRUE FALSE  TRUE\n```\n:::\n\n```{.r .cell-code}\nis.vector(v9)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n\n```{.r .cell-code}\n#Construción de un vector a partir de otros vectores\nv10 <- c(v1, v4)\nv10\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]  2  4  8 12 15\n```\n:::\n\n```{.r .cell-code}\n#Sumando un valor a todos los elementos de un vector\nv11 <- v10 + 5\nv11\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]  7  9 13 17 20\n```\n:::\n\n```{.r .cell-code}\n#Raíz cuadrada de un vector\nv12 <- sqrt(v11)\nv12\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 2.645751 3.000000 3.605551 4.123106 4.472136\n```\n:::\n\n```{.r .cell-code}\n#Potencia de un vector\nv13 <- v11**3\nv13\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]  343  729 2197 4913 8000\n```\n:::\n:::\n\n\n### Operaciones con vectores\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#Creación del vector de diámetros 'dap'\ndap <- c(8, 9.4, 11, 7, 8.9,\n         10, 15, 12.8, 13, 3)\ndap\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1]  8.0  9.4 11.0  7.0  8.9 10.0 15.0 12.8 13.0  3.0\n```\n:::\n\n```{.r .cell-code}\n#Calculando el promedio del dap\nmedia1 <- sum(dap)/10\nmedia1\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 9.81\n```\n:::\n\n```{.r .cell-code}\n#Cálculo el promedio del dap consultando el número de elementos del vector 'dap'\nmedia2 <- sum(dap)/length(dap)\nmedia2\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 9.81\n```\n:::\n\n```{.r .cell-code}\n#Promedio utilizando la función mean\nmedia3 <- mean(dap)\nmedia3\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 9.81\n```\n:::\n\n```{.r .cell-code}\n#Desviación estándar del dap\ndesvest <- sd(dap)\ndesvest\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 3.43267\n```\n:::\n\n```{.r .cell-code}\n#Convertir el dap de cm a metros\ndap_m <- dap/100\ndap_m\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] 0.080 0.094 0.110 0.070 0.089 0.100 0.150 0.128 0.130 0.030\n```\n:::\n\n```{.r .cell-code}\n#Calcular el área seccional de esos árboles\nas <- (pi/4)*dap_m^2\nas\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] 0.0050265482 0.0069397782 0.0095033178 0.0038484510 0.0062211389\n [6] 0.0078539816 0.0176714587 0.0128679635 0.0132732290 0.0007068583\n```\n:::\n\n```{.r .cell-code}\n#Graficando dap versus as\nplot(dap, as)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\n### Funciones en `R` para la creación de vectores\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#Secuencia de números enteros\nv14 <- 1:10\nv14\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1]  1  2  3  4  5  6  7  8  9 10\n```\n:::\n\n```{.r .cell-code}\n#Secuencia de números decimales\nv15 <- 10.5:20\nv15\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] 10.5 11.5 12.5 13.5 14.5 15.5 16.5 17.5 18.5 19.5\n```\n:::\n\n```{.r .cell-code}\n#vector de números negativos\nv16 <- -10:-1 \nv16\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] -10  -9  -8  -7  -6  -5  -4  -3  -2  -1\n```\n:::\n\n```{.r .cell-code}\n#Vector de de un gran número de elementos\nv17 <- 20:5000\n\n#Consultando la longitud de 'v17'\nlength(v17)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 4981\n```\n:::\n:::\n\n\nEl vector `v17` tiene 4981 elementos.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#consultando los primeros  100 elementos de 'v17'\nhead(v17, 100)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  [1]  20  21  22  23  24  25  26  27  28  29  30  31  32  33  34  35  36  37\n [19]  38  39  40  41  42  43  44  45  46  47  48  49  50  51  52  53  54  55\n [37]  56  57  58  59  60  61  62  63  64  65  66  67  68  69  70  71  72  73\n [55]  74  75  76  77  78  79  80  81  82  83  84  85  86  87  88  89  90  91\n [73]  92  93  94  95  96  97  98  99 100 101 102 103 104 105 106 107 108 109\n [91] 110 111 112 113 114 115 116 117 118 119\n```\n:::\n\n```{.r .cell-code}\n#Uso de la función seq() para la creación de secuencias\n\n#Crea una secuencia de 1 a 20, con un intervalo de 2\nv18 <- seq(1, 20, 2)\nv18\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1]  1  3  5  7  9 11 13 15 17 19\n```\n:::\n\n```{.r .cell-code}\n#Crea una secuencia de 50 a 1, con un intervalo de -4\nv19 <- seq(50, 1, -4)\nv19\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] 50 46 42 38 34 30 26 22 18 14 10  6  2\n```\n:::\n\n```{.r .cell-code}\n#Crea una secuencia de 30 a 35, con un intervalo de 0.75\nv20 <- seq(10, 35, 0.75)\nv20\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] 10.00 10.75 11.50 12.25 13.00 13.75 14.50 15.25 16.00 16.75 17.50 18.25\n[13] 19.00 19.75 20.50 21.25 22.00 22.75 23.50 24.25 25.00 25.75 26.50 27.25\n[25] 28.00 28.75 29.50 30.25 31.00 31.75 32.50 33.25 34.00 34.75\n```\n:::\n\n```{.r .cell-code}\n#Uso de la función rep() para la creación de repeticiones\n\n#Repite 5 veces el número 1\nv21 <- rep(1, 5)\nv21\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1 1 1 1 1\n```\n:::\n\n```{.r .cell-code}\n#Repite 5 veces el vector 'dap'\nv22 <- rep(dap, 5)\nv22\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1]  8.0  9.4 11.0  7.0  8.9 10.0 15.0 12.8 13.0  3.0  8.0  9.4 11.0  7.0  8.9\n[16] 10.0 15.0 12.8 13.0  3.0  8.0  9.4 11.0  7.0  8.9 10.0 15.0 12.8 13.0  3.0\n[31]  8.0  9.4 11.0  7.0  8.9 10.0 15.0 12.8 13.0  3.0  8.0  9.4 11.0  7.0  8.9\n[46] 10.0 15.0 12.8 13.0  3.0\n```\n:::\n:::\n\n\n## Bonus Track\n\nOtra forma para asignación de valores a un objeto o variable.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Asignación de valores al vector 'a'\nc(1, 2, 3) -> a\na\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1 2 3\n```\n:::\n:::\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}