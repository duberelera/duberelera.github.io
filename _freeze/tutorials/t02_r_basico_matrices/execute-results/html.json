{
  "hash": "e87d0d18549d0b6df38a82839f1bedd0",
  "result": {
    "markdown": "---\ntitle: 'R aplicado a Medición Forestal'\nsubtitle: 'R Básico: Creación y Manipulación de objetos'\nauthor: \"MSc. Duberlí G. Elera G.\"\ndate: \"2023-09-04\"\nformat: html\neditor: visual\nresources:\n  - \"imagens/Matriz.png\"\n---\n\n\n\n\n# Creación y Manipulación de objetos en `R`\n\n## Matrices\n\nUna matriz es un tipo especial de objeto en `R`, es una colección de elementos del mismo tipo de datos (numéricos, caracteres o lógicos) dispuestos en filas y columnas.\n\n![](imagens/Matriz.png){width=\"30%\"}\n\nPara construir una matriz en `R` hacemos uso de la función `matrix()`, que tiene dos argumentos fundamentales, 1) los datos a partir de los cuales se construirá la matriz (`data`) y 2) el número de filas que tendrá la matriz (`nrow`).\n\n## Creación de una matriz\n\nLa forma más sencilla de crear una matriz en `R` es partir por la creación de un vector, el cuál será el primer argumento de la función.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#Dado el vector 'x'\nx <- 6:17 #vector de números enteros entre 6 y 17\nx\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1]  6  7  8  9 10 11 12 13 14 15 16 17\n```\n:::\n\n```{.r .cell-code}\n#Creamos la Matriz 'm1' con 3 filas.\nm1 <- matrix(data = x, nrow = 3)\nm1\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     [,1] [,2] [,3] [,4]\n[1,]    6    9   12   15\n[2,]    7   10   13   16\n[3,]    8   11   14   17\n```\n:::\n:::\n\n\nComo podemos apreciar, se formó una matriz de 3 filas (`nrow = 3`) y `R` definió el número de columnas de manera automática, en este caso 4 columnas.\n\nSin embargo, la función `matrix()` permite especificar el tanto número de filas y como el número de columnas, si el usuario así lo prefiere.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#Creación de la matriz 'm2' con 4 filas y 3 columnas\nm2 <- matrix(data = x, nrow = 4, ncol = 3)\nm2\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     [,1] [,2] [,3]\n[1,]    6   10   14\n[2,]    7   11   15\n[3,]    8   12   16\n[4,]    9   13   17\n```\n:::\n:::\n\n\nEn las matrices `m1` y `m2` verificamos que los elementos de la matriz son ordenados en columnas, ello porque existe un cuarto argumento lógico de la función `matrix()` denominado `byrow` cuyo valor por defecto es `FALSE`, si modificamos ese argumento como `TRUE`, los elementos de la matriz serán ordenados por filas.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#Creación de la matriz 'm3' ordenando por filas\nm3 <- matrix(data = x, nrow = 4, ncol = 3, byrow = T)\nm3\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     [,1] [,2] [,3]\n[1,]    6    7    8\n[2,]    9   10   11\n[3,]   12   13   14\n[4,]   15   16   17\n```\n:::\n:::\n\n\nLa función `matrix()` tiene un quinto argumento que permite definir los nombres de las filas y las columnas de una matriz. Este argumento se denomina `dimnames` y recibe como una lista con los vectores que asu vez contienen los nombres de las filas y las columnas.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#Como primer paso, creamos los nombres de filas y columnas\nnfila <- c('f1', 'f2', 'f3', 'f4') #Vector con los nombres de las 4 filas\n\nncolum <- c('c1', 'c2', 'c3') #Vector con los nombres de las 3 columnas\n\n#Creamos la matriz 'm4' con nombres de filas y columnas\nm4 <- matrix(data = x,\n             nrow = 4,\n             ncol = 3,\n             byrow = T,\n             dimnames = list(nfila, ncolum))\nm4\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   c1 c2 c3\nf1  6  7  8\nf2  9 10 11\nf3 12 13 14\nf4 15 16 17\n```\n:::\n:::\n\n\nComo ya hemos visto en casos anteriores, la sintaxis de `R` permite aplicar una función e ingresar sus argumentos sin necesidad de indicar el nombre de estos, para ello, el valor de cada argumento de la función deberá ser ingresado en el orden que corresponde.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#Creando una matriz, sin especificar el nombre de sus argumentos\nm6 <- matrix(1:20, 4, 5, TRUE) #Debe crear una matriz con elementos numéricos de 1 a 20, con 4 filas, 5 columnas y ordenado por filas.\nm6\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     [,1] [,2] [,3] [,4] [,5]\n[1,]    1    2    3    4    5\n[2,]    6    7    8    9   10\n[3,]   11   12   13   14   15\n[4,]   16   17   18   19   20\n```\n:::\n:::\n\n\n## Manipulación de matrices\n\nLas Matrices así como todos los objetos de `R` son suceptibles de manipular, pudiendo hacer modificaciones en todo o en parte de ella.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#Dada la Matriz\nm7 <- matrix(data = 1:12, nrow = 3) \n\n#Es posible convertir la matriz 'm7' en vector\nv1 <- as.vector(m7)\nv1\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1]  1  2  3  4  5  6  7  8  9 10 11 12\n```\n:::\n\n```{.r .cell-code}\n#Trasponer una matriz utilizando la función t(), la cual cambia la posición entre filas y columnas.\nm8 <- t(m7)\nm8\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     [,1] [,2] [,3]\n[1,]    1    2    3\n[2,]    4    5    6\n[3,]    7    8    9\n[4,]   10   11   12\n```\n:::\n:::\n\n\nExisten funciones que permiten unir dos o más matrices ya sea adicionando nuevas columnas (`cbind()`) o nuevas filas (`rcbind()`).\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#Si tengo dos matrices con igual número de filas\nm9 <- matrix(data = 1:12, nrow = 3)\nm9\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     [,1] [,2] [,3] [,4]\n[1,]    1    4    7   10\n[2,]    2    5    8   11\n[3,]    3    6    9   12\n```\n:::\n\n```{.r .cell-code}\nm10<- matrix(data = 21:26, nrow = 3)\nm10\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     [,1] [,2]\n[1,]   21   24\n[2,]   22   25\n[3,]   23   26\n```\n:::\n\n```{.r .cell-code}\n#Puedo construir una nueva matriz de 6 columnas y 3 filas, uniendo 'm9' y 'm10' con la función  'cbind()'\ncbind(m9, m10)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     [,1] [,2] [,3] [,4] [,5] [,6]\n[1,]    1    4    7   10   21   24\n[2,]    2    5    8   11   22   25\n[3,]    3    6    9   12   23   26\n```\n:::\n\n```{.r .cell-code}\n#Por el contrario Si tengo dos matrices con igual número de columnas\nm11 <- matrix(data = 1:12, ncol = 3)\nm11\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     [,1] [,2] [,3]\n[1,]    1    5    9\n[2,]    2    6   10\n[3,]    3    7   11\n[4,]    4    8   12\n```\n:::\n\n```{.r .cell-code}\nm12<- matrix(data = 21:26, ncol = 3)\nm12\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     [,1] [,2] [,3]\n[1,]   21   23   25\n[2,]   22   24   26\n```\n:::\n\n```{.r .cell-code}\n#Puedo construir una nueva matriz de 6 filas y 3 columnas, uniendo 'm11' y 'm12' con la función  'rbind()'\nrbind(m11, m12)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     [,1] [,2] [,3]\n[1,]    1    5    9\n[2,]    2    6   10\n[3,]    3    7   11\n[4,]    4    8   12\n[5,]   21   23   25\n[6,]   22   24   26\n```\n:::\n:::\n\n\n## Operaciones matemáticas con Matrices\n\nAl igual que en las operaciones matemáticas con vectores, cuando realizamos operaciones matemáticas utilizando matrices, dichas operaciones se realizan sobre cada uno de los elementos de la matriz.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#Dada la matriz\nm13 <- matrix(data = 1:12, ncol = 3)\n\n#Sumatoria entre matrices\nm14 <- m13 + m13\nm14\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     [,1] [,2] [,3]\n[1,]    2   10   18\n[2,]    4   12   20\n[3,]    6   14   22\n[4,]    8   16   24\n```\n:::\n\n```{.r .cell-code}\n#Sumar una constante a una matriz\nm15 <- m13 + 23\nm15\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     [,1] [,2] [,3]\n[1,]   24   28   32\n[2,]   25   29   33\n[3,]   26   30   34\n[4,]   27   31   35\n```\n:::\n\n```{.r .cell-code}\n#Multiplicar una constante a una matriz\nm16 <- m13*2\nm16\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     [,1] [,2] [,3]\n[1,]    2   10   18\n[2,]    4   12   20\n[3,]    6   14   22\n[4,]    8   16   24\n```\n:::\n\n```{.r .cell-code}\n#Aplicar una potencia a una matriz\nm13^3\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     [,1] [,2] [,3]\n[1,]    1  125  729\n[2,]    8  216 1000\n[3,]   27  343 1331\n[4,]   64  512 1728\n```\n:::\n\n```{.r .cell-code}\n#Aplicar raíz cuadrada a una matriz\nsqrt(m13)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n         [,1]     [,2]     [,3]\n[1,] 1.000000 2.236068 3.000000\n[2,] 1.414214 2.449490 3.162278\n[3,] 1.732051 2.645751 3.316625\n[4,] 2.000000 2.828427 3.464102\n```\n:::\n:::\n\n\n**IMPORTANTE**: Cuando se realizan operaciones matemáticas entre matrices, debemos tener en consideración que sus dimensiones, es decir, el número de filas y de columnas, deben ser compatibles.\n\nEn su consola de RStudio, intente multiplicar `m1*m2`, las cuales tienen dimensiones diferentes. Verá que, al ejecutar el código le arrojará como resultados un error.\n\n## Acceso a los elementos de un objeto `R`\n\nEn multiples ocasiones, necesitaremos acceder a un elemento en particular o a un conjunto de elementos de un determinado objeto en `R`, dicha acción es posible mediante la identificación adecuada de los índices o posiciones de cada elemento del objeto, utilizando para ello el operador `[]`. A continuación de muestra las distintas formas de acceder a los elementos d eun vector o una matriz.\n\n### Accediendo a los índices en vectores\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#Dado el vector 'x1'\nx1 <- 6:14\nx1\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]  6  7  8  9 10 11 12 13 14\n```\n:::\n\n```{.r .cell-code}\n#Accedo a sus elementos con el operador '[]'\nx1[5] #accedo a la posición 5 en x1\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 10\n```\n:::\n\n```{.r .cell-code}\nx1[9] #accedo a la posición 9 en x1\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 14\n```\n:::\n\n```{.r .cell-code}\nx1[4:7] #Accedo a posiciones consecutivas de 4 a 7\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]  9 10 11 12\n```\n:::\n\n```{.r .cell-code}\nx1[c(2,4,6,8)] #accedo a las posiciones pares\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]  7  9 11 13\n```\n:::\n\n```{.r .cell-code}\nx1[seq(1,9,2)]  #accedo a las posiciones impares\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]  6  8 10 12 14\n```\n:::\n:::\n\n\n### Accediendo a los índices en Matrices\n\nPara acceder a los elementos de una matriz es necesario indicar el índice a nivel de fila y columna.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#Dada la matriz 'm'\nm <- matrix(data = 1:20, nrow = 4, ncol= 5, byrow = TRUE) \nm\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     [,1] [,2] [,3] [,4] [,5]\n[1,]    1    2    3    4    5\n[2,]    6    7    8    9   10\n[3,]   11   12   13   14   15\n[4,]   16   17   18   19   20\n```\n:::\n\n```{.r .cell-code}\n#Accediendo a la posición 1,1\nm[1,1] \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1\n```\n:::\n\n```{.r .cell-code}\n#Accediendo a la posición 2,3\nm[2,3]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 8\n```\n:::\n\n```{.r .cell-code}\n#Accediendo a la posición 3,4\nm[3,4]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 14\n```\n:::\n\n```{.r .cell-code}\n#Accediendo a filas completas, fila 3\nm[3, ]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 11 12 13 14 15\n```\n:::\n\n```{.r .cell-code}\n#Accediendo a columnas completas, columna 4\nm[ ,4]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]  4  9 14 19\n```\n:::\n\n```{.r .cell-code}\n#Accedediendo a columnas y filas consecutivas\nm[3, 2:4]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 12 13 14\n```\n:::\n\n```{.r .cell-code}\nm[1:3, 2:4]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     [,1] [,2] [,3]\n[1,]    2    3    4\n[2,]    7    8    9\n[3,]   12   13   14\n```\n:::\n\n```{.r .cell-code}\n#Accedediendo a columnas y filas no consecutivas\nm[c(1,3,4), c(2,5)]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     [,1] [,2]\n[1,]    2    5\n[2,]   12   15\n[3,]   17   20\n```\n:::\n:::\n\n\n### Modificando valores en matrices\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#Modificando el valor de la posición 1,1 en la matriz 'm'\nm[1,1] <- 21\nm\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     [,1] [,2] [,3] [,4] [,5]\n[1,]   21    2    3    4    5\n[2,]    6    7    8    9   10\n[3,]   11   12   13   14   15\n[4,]   16   17   18   19   20\n```\n:::\n\n```{.r .cell-code}\n#Modificando multiples valores de la matriz'm'\nm[c(1,3,4), c(2,5)] <- 12\nm \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     [,1] [,2] [,3] [,4] [,5]\n[1,]   21   12    3    4   12\n[2,]    6    7    8    9   10\n[3,]   11   12   13   14   12\n[4,]   16   12   18   19   12\n```\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}