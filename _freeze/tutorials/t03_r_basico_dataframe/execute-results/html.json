{
  "hash": "cab81889d7d55eb0d3c0f01840182fbd",
  "result": {
    "markdown": "---\ntitle: 'R aplicado a Medición Forestal'\nsubtitle: 'R Básico: Creación y Manipulación de objetos'\nauthor: \"MSc. Duberlí G. Elera G.\"\ndate: \"2023-09-04\"\nformat: html\neditor: visual\n---\n\n\n\n# Creación y Manipulación de objetos en `R`\n## Data Frames\n\nUna `data frame` es una estructura de datos que permite almacenar datos de diferentes tipos. En un nivel intuitivo, una _data frame_ o marco de datos es como una matriz, con una estructura bidimensional de filas y columnas, con la diferencia que no todas las columnas están condicionadas a tener el mismo tipo de dato.\n\n![](Imagenes/DataFrame.png){ width=30% }\n\nEn `R` una _data frame_ se crea con la función `data.frame()`, los argumentos de esta función lo conforman las columnas que constituirán el marco de datos.\n\n## Creación de una _data frame_\nPara crear una _data frame_ de forma sencilla en `R` partiremos por la creación de vectores de la misma longitud.\n\n::: {.cell}\n\n```{.r .cell-code}\n#Creación de los vectores que formarán mi data frame\narbol <- 1:10\nespecie <- rep('pino', 10)\ndap <- c(18.1, 14.6, 16.9, 14.3, 12.7,\n         14.3, 19.1, 13.1, 15.9, 14)\n```\n:::\n\n\nEn seguida creamos nuestro marco de datos utilizando la función `data.frame()` cuyos argumentos son los tres vectores creados en el paso anterior y le asignamos el nombre `df`. \n\n\n::: {.cell}\n\n```{.r .cell-code}\n#Construyendo mi data frame o cuadro de datos\ndf <- data.frame(arbol, especie, dap)\ndf\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   arbol especie  dap\n1      1    pino 18.1\n2      2    pino 14.6\n3      3    pino 16.9\n4      4    pino 14.3\n5      5    pino 12.7\n6      6    pino 14.3\n7      7    pino 19.1\n8      8    pino 13.1\n9      9    pino 15.9\n10    10    pino 14.0\n```\n:::\n:::\n\nEn nuestro ejemplo, creamos `df` con datos de mediciones del **dap** de 10 árboles. \n\nCuando trabajos con mediciones forestales es usual calcular nuevas variables de tal manera que necesitamos ampliar nuestra _data frame_ adicionando nuevas columnas, para ello utilizamos la siguiente estrategia.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#Adicionando una nueva columna llamada 'dap_m' en la cual almacenamos el valor del 'dap' en m, dividiendo 'dap' en cm entre 100\ndf$dap_m <-  df$dap/100 #df$dap_m crea la nueva columna 'dap_m' en df.\ndf\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   arbol especie  dap dap_m\n1      1    pino 18.1 0.181\n2      2    pino 14.6 0.146\n3      3    pino 16.9 0.169\n4      4    pino 14.3 0.143\n5      5    pino 12.7 0.127\n6      6    pino 14.3 0.143\n7      7    pino 19.1 0.191\n8      8    pino 13.1 0.131\n9      9    pino 15.9 0.159\n10    10    pino 14.0 0.140\n```\n:::\n\n```{.r .cell-code}\n#Adicionamos una nueva columna para Calcular el área seccional de los árboles (m2)\ndf$as <- (pi/4)*df$dap_m^2\ndf\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   arbol especie  dap dap_m         as\n1      1    pino 18.1 0.181 0.02573043\n2      2    pino 14.6 0.146 0.01674155\n3      3    pino 16.9 0.169 0.02243176\n4      4    pino 14.3 0.143 0.01606061\n5      5    pino 12.7 0.127 0.01266769\n6      6    pino 14.3 0.143 0.01606061\n7      7    pino 19.1 0.191 0.02865211\n8      8    pino 13.1 0.131 0.01347822\n9      9    pino 15.9 0.159 0.01985565\n10    10    pino 14.0 0.140 0.01539380\n```\n:::\n\n```{.r .cell-code}\n# También es posible adicionar un nuevo vector con el valor de la altura de los árboles\ndf$ht <- c(13, 9, 11, 8, 7, 9, 15, 7, 10, 8)\ndf\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   arbol especie  dap dap_m         as ht\n1      1    pino 18.1 0.181 0.02573043 13\n2      2    pino 14.6 0.146 0.01674155  9\n3      3    pino 16.9 0.169 0.02243176 11\n4      4    pino 14.3 0.143 0.01606061  8\n5      5    pino 12.7 0.127 0.01266769  7\n6      6    pino 14.3 0.143 0.01606061  9\n7      7    pino 19.1 0.191 0.02865211 15\n8      8    pino 13.1 0.131 0.01347822  7\n9      9    pino 15.9 0.159 0.01985565 10\n10    10    pino 14.0 0.140 0.01539380  8\n```\n:::\n:::\n\n\n## Exploración de la _data frames_\n\nEn análisis de datos es común trabajar con bases de datos de gran tamaño. Una de las primeras tareas como analista de datos será conocer las variables con las que se va trabajar y comprender la estructura y conocer las características de los datos\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#Consultar el nombre de las variables que componen mi data frame\nnames(df)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"arbol\"   \"especie\" \"dap\"     \"dap_m\"   \"as\"      \"ht\"     \n```\n:::\n\n```{.r .cell-code}\n#Consultar la estructura de los datos\nstr(df)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n'data.frame':\t10 obs. of  6 variables:\n $ arbol  : int  1 2 3 4 5 6 7 8 9 10\n $ especie: chr  \"pino\" \"pino\" \"pino\" \"pino\" ...\n $ dap    : num  18.1 14.6 16.9 14.3 12.7 14.3 19.1 13.1 15.9 14\n $ dap_m  : num  0.181 0.146 0.169 0.143 0.127 0.143 0.191 0.131 0.159 0.14\n $ as     : num  0.0257 0.0167 0.0224 0.0161 0.0127 ...\n $ ht     : num  13 9 11 8 7 9 15 7 10 8\n```\n:::\n\n```{.r .cell-code}\n#Consultar las estadísticas descriptivas de los datos\nsummary(df)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     arbol         especie               dap            dap_m       \n Min.   : 1.00   Length:10          Min.   :12.70   Min.   :0.1270  \n 1st Qu.: 3.25   Class :character   1st Qu.:14.07   1st Qu.:0.1407  \n Median : 5.50   Mode  :character   Median :14.45   Median :0.1445  \n Mean   : 5.50                      Mean   :15.30   Mean   :0.1530  \n 3rd Qu.: 7.75                      3rd Qu.:16.65   3rd Qu.:0.1665  \n Max.   :10.00                      Max.   :19.10   Max.   :0.1910  \n       as                ht       \n Min.   :0.01267   Min.   : 7.00  \n 1st Qu.:0.01556   1st Qu.: 8.00  \n Median :0.01640   Median : 9.00  \n Mean   :0.01871   Mean   : 9.70  \n 3rd Qu.:0.02179   3rd Qu.:10.75  \n Max.   :0.02865   Max.   :15.00  \n```\n:::\n:::\n\n\nEn la etapa de exploración también es común auxiliarse de los métodos gráficos, con la finalidad de visualizar la distribución, relación y dispersión de las observaciones que conforman el _data frame_.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#Visuaizar mis datos a través de un gráfico que muestra todas mis variables\nplot(df)\n```\n\n::: {.cell-output-display}\n![](t03_r_basico_dataframe_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\nAsí mismo, se puede hacer un análisis gráfico de la distribución de una variable o de la relación de pares de variables.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#Creando un histrograma de frecuencias del 'dap' para vizualizar la distribución de las observaciones.\n\nhist(df$dap)\n```\n\n::: {.cell-output-display}\n![](t03_r_basico_dataframe_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n\n```{.r .cell-code}\n#Gráfico que permite vizualizar la relación entre dos variables de mi data frame, en este caso dap vs. altura\nplot(ht ~ dap, df, pch = 19,  col = 'blue')\n```\n\n::: {.cell-output-display}\n![](t03_r_basico_dataframe_files/figure-html/unnamed-chunk-6-2.png){width=672}\n:::\n\n```{.r .cell-code}\n#El argumento 'pch' define el tipo de punto y 'col' define el color.\n```\n:::\n\n\nPara explorar parte de nuestros datos cuando se cuenta con bases de datos extensas, a menudo es útil mostrar sólo una pequeña parte de todo el conjunto de datos.\n  \n\n::: {.cell}\n\n```{.r .cell-code}\n#Visualizar parte de mis datos.\nhead(df) #Muestra las primeras 6 observaciones\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  arbol especie  dap dap_m         as ht\n1     1    pino 18.1 0.181 0.02573043 13\n2     2    pino 14.6 0.146 0.01674155  9\n3     3    pino 16.9 0.169 0.02243176 11\n4     4    pino 14.3 0.143 0.01606061  8\n5     5    pino 12.7 0.127 0.01266769  7\n6     6    pino 14.3 0.143 0.01606061  9\n```\n:::\n\n```{.r .cell-code}\ntail(df) #Muestra las últimas 6 observaciones\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   arbol especie  dap dap_m         as ht\n5      5    pino 12.7 0.127 0.01266769  7\n6      6    pino 14.3 0.143 0.01606061  9\n7      7    pino 19.1 0.191 0.02865211 15\n8      8    pino 13.1 0.131 0.01347822  7\n9      9    pino 15.9 0.159 0.01985565 10\n10    10    pino 14.0 0.140 0.01539380  8\n```\n:::\n:::\n\n\n## Manipulación de _data frames_\n\n### Acceso por medio de los índices\nAl igual que en vectores y matrices, se puede acceder a uno o un grupo de elementos de una _data frame_ a través de sus respectivos índices, recordando que una _data frame_ es una estructura de datos bidimensional.\n\n::: {.cell}\n\n```{.r .cell-code}\n#Acceso a las variables o columnas de una data frame\ndf$especie #Accede a la columna de 'df' llamada especie\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"pino\" \"pino\" \"pino\" \"pino\" \"pino\" \"pino\" \"pino\" \"pino\" \"pino\" \"pino\"\n```\n:::\n\n```{.r .cell-code}\ndf[2] #Accede a la columna 2 de 'df'\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   especie\n1     pino\n2     pino\n3     pino\n4     pino\n5     pino\n6     pino\n7     pino\n8     pino\n9     pino\n10    pino\n```\n:::\n\n```{.r .cell-code}\ndf['especie'] #Accede a la columna de 'df' llamada especie\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   especie\n1     pino\n2     pino\n3     pino\n4     pino\n5     pino\n6     pino\n7     pino\n8     pino\n9     pino\n10    pino\n```\n:::\n\n```{.r .cell-code}\n#Acceso a más de una columna.\ndf[2:4] #Accedo a las columas de 2 a 4 en 'df'\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   especie  dap dap_m\n1     pino 18.1 0.181\n2     pino 14.6 0.146\n3     pino 16.9 0.169\n4     pino 14.3 0.143\n5     pino 12.7 0.127\n6     pino 14.3 0.143\n7     pino 19.1 0.191\n8     pino 13.1 0.131\n9     pino 15.9 0.159\n10    pino 14.0 0.140\n```\n:::\n\n```{.r .cell-code}\ndf[c(2,4,6)] #Accedo a las columas 2, 4 y 6 en 'df'\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   especie dap_m ht\n1     pino 0.181 13\n2     pino 0.146  9\n3     pino 0.169 11\n4     pino 0.143  8\n5     pino 0.127  7\n6     pino 0.143  9\n7     pino 0.191 15\n8     pino 0.131  7\n9     pino 0.159 10\n10    pino 0.140  8\n```\n:::\n\n```{.r .cell-code}\n#Para acceder a filas y columnas se aplica el mismo procedimiento aplicado en matrices\ndf[5:8, c(2,4,6)]  #Accedo a las filas de la 5 a la 8 y a columas 2, 4 y 6 en 'df'\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  especie dap_m ht\n5    pino 0.127  7\n6    pino 0.143  9\n7    pino 0.191 15\n8    pino 0.131  7\n```\n:::\n:::\n\n\n### Modificación de elementos de una variable\n\nDespués de acceder a una columna completa de un _data frame_ puede existir la necesidad de acceder a un segundo nivel, es decir a uno de los elementos de esa column e incluso hacer modificaciones por elemento.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#Accediendo al elemento número 2 de la columna 'especie' \ndf$especie[2]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"pino\"\n```\n:::\n\n```{.r .cell-code}\n#Replazando valores en una variable o columna\n#Modificando el valor delemento número 2 de la columna 'especie'\ndf$especie[2] <- 'eucalipto'\ndf\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   arbol   especie  dap dap_m         as ht\n1      1      pino 18.1 0.181 0.02573043 13\n2      2 eucalipto 14.6 0.146 0.01674155  9\n3      3      pino 16.9 0.169 0.02243176 11\n4      4      pino 14.3 0.143 0.01606061  8\n5      5      pino 12.7 0.127 0.01266769  7\n6      6      pino 14.3 0.143 0.01606061  9\n7      7      pino 19.1 0.191 0.02865211 15\n8      8      pino 13.1 0.131 0.01347822  7\n9      9      pino 15.9 0.159 0.01985565 10\n10    10      pino 14.0 0.140 0.01539380  8\n```\n:::\n:::\n",
    "supporting": [
      "t03_r_basico_dataframe_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}